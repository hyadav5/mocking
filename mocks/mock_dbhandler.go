// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDbHandlerIf is a mock of DbHandlerIf interface.
type MockDbHandlerIf struct {
	ctrl     *gomock.Controller
	recorder *MockDbHandlerIfMockRecorder
}

// MockDbHandlerIfMockRecorder is the mock recorder for MockDbHandlerIf.
type MockDbHandlerIfMockRecorder struct {
	mock *MockDbHandlerIf
}

// NewMockDbHandlerIf creates a new mock instance.
func NewMockDbHandlerIf(ctrl *gomock.Controller) *MockDbHandlerIf {
	mock := &MockDbHandlerIf{ctrl: ctrl}
	mock.recorder = &MockDbHandlerIfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbHandlerIf) EXPECT() *MockDbHandlerIfMockRecorder {
	return m.recorder
}

// AssignPassword mocks base method.
func (m *MockDbHandlerIf) AssignPassword(userName, password string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPassword", userName, password)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignPassword indicates an expected call of AssignPassword.
func (mr *MockDbHandlerIfMockRecorder) AssignPassword(userName, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPassword", reflect.TypeOf((*MockDbHandlerIf)(nil).AssignPassword), userName, password)
}

// Close mocks base method.
func (m *MockDbHandlerIf) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDbHandlerIfMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDbHandlerIf)(nil).Close))
}

// CreateDatabase mocks base method.
func (m *MockDbHandlerIf) CreateDatabase(dbName string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", dbName)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockDbHandlerIfMockRecorder) CreateDatabase(dbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockDbHandlerIf)(nil).CreateDatabase), dbName)
}

// CreateDatabaseUser mocks base method.
func (m *MockDbHandlerIf) CreateDatabaseUser(userName string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabaseUser", userName)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabaseUser indicates an expected call of CreateDatabaseUser.
func (mr *MockDbHandlerIfMockRecorder) CreateDatabaseUser(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabaseUser", reflect.TypeOf((*MockDbHandlerIf)(nil).CreateDatabaseUser), userName)
}

// DropDatabase mocks base method.
func (m *MockDbHandlerIf) DropDatabase(dbName string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDatabase", dbName)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropDatabase indicates an expected call of DropDatabase.
func (mr *MockDbHandlerIfMockRecorder) DropDatabase(dbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDatabase", reflect.TypeOf((*MockDbHandlerIf)(nil).DropDatabase), dbName)
}

// DropDatabaseUser mocks base method.
func (m *MockDbHandlerIf) DropDatabaseUser(userName string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDatabaseUser", userName)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropDatabaseUser indicates an expected call of DropDatabaseUser.
func (mr *MockDbHandlerIfMockRecorder) DropDatabaseUser(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDatabaseUser", reflect.TypeOf((*MockDbHandlerIf)(nil).DropDatabaseUser), userName)
}

// GrantPrivileges mocks base method.
func (m *MockDbHandlerIf) GrantPrivileges(dbName, userName string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantPrivileges", dbName, userName)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantPrivileges indicates an expected call of GrantPrivileges.
func (mr *MockDbHandlerIfMockRecorder) GrantPrivileges(dbName, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantPrivileges", reflect.TypeOf((*MockDbHandlerIf)(nil).GrantPrivileges), dbName, userName)
}

// TerminateOpenDatabaseConnection mocks base method.
func (m *MockDbHandlerIf) TerminateOpenDatabaseConnection(dbName string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateOpenDatabaseConnection", dbName)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateOpenDatabaseConnection indicates an expected call of TerminateOpenDatabaseConnection.
func (mr *MockDbHandlerIfMockRecorder) TerminateOpenDatabaseConnection(dbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateOpenDatabaseConnection", reflect.TypeOf((*MockDbHandlerIf)(nil).TerminateOpenDatabaseConnection), dbName)
}
